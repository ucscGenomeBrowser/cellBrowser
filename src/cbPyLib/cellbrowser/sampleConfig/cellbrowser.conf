# --------- REQUIRED SETTINGS --------------

# example config file with all possible settings

# internal short name, only visible in the URL
# same as the output directory name
# no special chars, no whitespace, please
# (if you use dataset hierarchies=collections this tag is ignored)
name = "sample"

# priority determines the order of the datasets
# smallest comes first
priority = 10

# tags are shown in the dataset browser
# current tags:
# smartseq2,10x
tags = ["smartseq2"]

# human-readable name of this dataset
shortLabel="CellBrowser 100-genes demo"

# name of the expression matrix file, genes are rows
# Can also be in <baseName>.mtx.gz format, with <baseName>.features.tsv.gz
# and <baseName>.barcodes.tsv.gz
exprMatrix="exprMatrix.tsv.gz"

# "gencode-human", "gencode-mouse" or "symbol"
# For "symbol" you can specify which database to use to check
# symbols or, for cbHub, how to map them to the genome.
# 'auto' will automatically detect Ensembl human/mouse  IDs
# and translate to symbols
# If you have Ensembl IDs of another species, and the symbols
# are provided in the matrix itself (either |-separate for tsv format
# or tab-separated for mtx format), then you can also use "raw", 
# which will deactivate the symbol checking
geneIdType="auto"

# name of the meta data table ("samplesheet). One sample per row. First row is name of sample.
meta="meta.tsv"

# longer descriptions for the meta fields. If present, a little info icon is shown that shows the long
# field descriptions on mouse over. A two-column file, csv or tsv.
# metaDesc = "metaDesc.tsv"

# we try to auto-detect the field type of fields in the meta data.
# Sometimes, this doesn't work, e.g. when your cluster ID is a numer
# or your C1 chip ID is a number, but you don't want them binned, you want
# to treat as if they were categories
enumFields = ["c1_cell_id"]

# tsv files with coordinates of every sample in format <sampleId, x, y>
# first the name of the file, then a human readable description
coords=[
    {
            "file":"tsne.coords.tsv", 
            "flipY" : False, # R/Matplotlib files need to be flipped on the Y-axis
            "shortLabel":"t-SNE on WGCNA"
    },
    {
            "file":"subset.coords.tsv", 
            "shortLabel":"neural cells", 
            # you can overlay lines onto the cells, table has to have columns named x1, x2, y1, y2
            "lineFile" : "lines.tsv",
            # you can flip the y-axis of just the lines, relative to the points
            # This was necessary for a user when using the files produced by the URD pseudotime package
            #"lineFlipY" : True,
            # you can automatically switch on coloring on a meta data field whenever a layout is activated
            "colorOnMeta":"neuralCluster"
    },
]

# if you use the lineFile option, you can tweak their display a little with these statements, defaults are dark-grey, 0.5 and 3
#lineColor="#112233"
#lineAlpha=0.3
#lineWidth=5

# default field in the meta data table with the name of the cluster
clusterField="WGCNAcluster"

# default field in the meta data table used for the label of the clusters shown by default
labelField="WGCNAcluster"

# --------- OPTIONAL SETTINGS --------------

# The settings below are used to create filters on a Cell Browser instance (e.g. cells.ucsc.edu).
# Note, all filter values can be a list (e.g. body_parts = ["brain","cortex"])
body_parts = [""] # body_parts = ["heart"]
organisms = [""] # organisms = ["Human (H. sapiens)", "Mouse (M. musculus)"]
diseases = [""] # diseases = ["Healthy"]
projects = [""] # projects = ["GTEx", "Human Cell Atlas", "hca"]

# genes that are highlighted in your paper can be pre-loaded and are shown as a clickable table on the left
# this is optional but we highly recommend that you define at least 2-3 quick genes, it makes the browser a lot
# more intuitive for users
quickGenesFile = "quickGenes.csv"

# if you want to enforce some order of the values of your enums, e.g. your cluster annotation should be sorted
# in a given order in the display, supply a text file with the values in the right order, one per line.
# You can supply one text file per meta data field
# enumOrder = { "WGCNAcluster" : "clusterorder.txt" }

# tsv files with marker gene lists for the clusters 
# format is (clusterName, geneSymbol, pValue, enrichment) + any additional fields or URLs you want to show
# In addition to "file" and "shortLabel", these options for each marker are possible (but rarely needed):
# sortColumn: instead of sorting by the first, column, provide the index here, as a number, e.g. sortCoumn:2
# sortOrder: can be "asc" or "desc". Default is to sort ascending, so the smallest p-Values are first.
markers=[
    {"file":"markers.tsv", "shortLabel":"Cluster-specific markers"}
]

# do not show this dataset on the dataset list. This can be used for pre-publication data.
# visibility="hide"

# optional: UCSC track hub with the BAM file reads and expression values 
# Alternatively, you can also provide a full link to a UCSC Genome Browser session here
hubUrl="http://cells.ucsc.edu/cortex-dev/hub/hub.txt"

# Optional: for given fields, a tsv file with two-columns, pairs of <value><color>. File
# must have two columns, can be .tsv or .csv. No header line (header lines are
# stripped if they contain 'color').
# Value is a any string field value in the meta data table, e.g. cluster name. 
# Color is a six-digit hexcode (with or without #-prefix) or a CSS or R color name.
# (the special fieldname "__default__" means that the colors are applied to all fields)
# Right now, only cbImportScanpy can create these files automatically, as Seurat doesn't
# have a standard yet to store colors.
# (Instead of a { "field" : "filename.tsv" } dictionary, the old syntax is still allowed,
#  one string with the filename, for backwards-compatibility with 2019-2023 .conf files.
#  These colors are then applied across all fields, same as "__default__" in the new syntax)
colors= {
        # format: name-of-meta-field : name-of-color-file
        "cluster" : "cluster_colors.tsv"
        #"__default__" : "allcolors.tsv"
}

# should the cluster labels be shown by default (default: true)
showLabels=True

# the radius of the circles. If not specified, reasonable defaults will be used
#radius = 5
# the alpha/transparency of the circles. If not specified, reasonable defaults will be used.
#alpha = 0.3

# to assign colors, expression values have to be assigned to bins. The default strategy is to 
# count the cells and try to create bins where each bin has a similar number of cells, but with
# very different expression ranges.
# This can be changed to create bins that all have roughly the same expression range, but very 
# different cell counts. The two values here are "cells" or "range"
#binStrategy="range"
#
# Many datasets use acronyms in the meta.tsv file
# but cell types have complicated and long names
# So you can provide a table with two columns: 1) short cluster name 2) long version
# the first column is the cluster name that is in the meta.tsv file (an acronym, often)
# the second column is the long label that should be shown on mouse over or when you click
# on the cluster name
# e.g. EC, endothelial cells
# can be a .tsv or .csv file
acronymFile = "acronyms.tsv"

# the unit of the values in the expression matrix
# any string, shown on genome browser and violin y-Axis
# typical values are: "read count/UMI", "log of read count/UMI", "TPM", "log of TPM", "CPM", "FPKM", "RPKM"
unit = "TPM"   

# format of the numbers in the matrix. 
# 'auto' works in 99% of the cases. Otherwise you can use 'int' for integers and 'float' for  floating point numbers. 
# Use 'forceInt' if your matrix contains only integers but in a format like 3.123e10 
# or the matrix has only integers expressed like 100.000, 200.000, 300.00, ...
matrixType='auto'

# rarely needed: if your expression matrix does not contain genes, but something
# else, like "lipids" or "plankton", you can replace the word "gene" in the
# user interface with another word
# geneLabel = "Lipid"

# the default color palettes for this dataset. By default, we use Paul Tol's
# but you could use other ones. change the palette in the UI, look at the URL, the value for the palette
# This page lists all possible colors: http://google.github.io/palette.js/
# defQuantPal = "viridis"
# defCatPal = "rainbow"

# you can optionally show little images for clusters on the tooltip. 
# For now, they have to be PNGs.
# For now, you will have to copy these images to the source destination htdocs directory manually
# right now, only brain-lipids/all-lipids is using this
# clusterPngDir = "clusterImgs"

# Datasets can be filtered by body_part, organism, project, disease, life_stage, domain or source (repository
# where we got the data from, e.g. GEO)
# Each of these can have multiple values, so they must be lists
# Uncomment the following lines if you want to use the filters
#body_parts=["Brain"]
#organisms=['Human (H. sapiens)']
#projects=['CIRM']
#diseases=['Healthy']
#life_stages=["embryo"]
#domains=["Neuroscience"]
#sources=["direct"]
